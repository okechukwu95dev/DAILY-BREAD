name: Daily Database Update

on:
  schedule:
    # Run daily at 6:00 AM UTC (2:00 AM EST, 7:00 AM CET)
    - cron: '0 6 * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to run'
        required: false
        default: 'current_season'
        type: choice
        options:
          - current_season
          - full_refresh
          - competitions_only

jobs:
  update-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas
        
    - name: Download current database
      run: |
        # Try to download existing database from latest release
        echo "üîç Checking for existing database in releases..."
        
        # Create directories if they don't exist
        mkdir -p new_project/db
        mkdir -p new_project/db_automation
        
        # Use Python to check for existing database in releases
        python3 << 'EOF'
        import requests
        import os
        import sys
        
        try:
            # Get latest release
            url = f"https://api.github.com/repos/${{ github.repository }}/releases/latest"
            response = requests.get(url)
            
            if response.status_code == 200:
                release = response.json()
                # Look for database file in assets
                for asset in release.get('assets', []):
                    if asset['name'] == 'soccer_data_colab.db':
                        print(f"üì• Downloading existing database from release...")
                        db_response = requests.get(asset['browser_download_url'])
                        with open('new_project/db/soccer_data_colab.db', 'wb') as f:
                            f.write(db_response.content)
                        print("‚úÖ Database downloaded successfully")
                        sys.exit(0)
            
            print("üìÅ No existing database found, will create new one")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error checking releases: {e}")
            print("üìÅ Will create new database")
        EOF
        
    - name: Run database update
      env:
        UPDATE_TYPE: ${{ github.event.inputs.update_type || 'current_season' }}
      run: |
        echo "üöÄ Starting database update: $UPDATE_TYPE"
        cd .github/scripts
        
        # Check if database exists, if not create it first
        if [ ! -f "../../new_project/db/soccer_data_colab.db" ]; then
          echo "üìÅ Database not found, creating new database..."
          python create_schema.py
        fi
        
        # Run the appropriate update script based on input
        case "$UPDATE_TYPE" in
          "current_season")
            echo "üìä Updating current season data..."
            python update_current_season.py
            ;;
          "full_refresh")
            echo "üîÑ Full database refresh..."
            python create_schema.py
            python full_database_population.py
            ;;
          "competitions_only")
            echo "üèÜ Updating competitions only..."
            python update_current_season.py
            ;;
        esac
    - name: Debug DB file state
      run: |
        echo "üìÇ GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
        echo "üìÅ Listing new_project/db contents (if any)..."
        ls -al new_project/db || echo "(directory missing)"
        echo "üîé Searching for soccer_data_colab.db..."
        find . -maxdepth 4 -name soccer_data_colab.db -printf '%p %k KB\n' || true
        echo "PWD after update step: $(pwd)"
        
    - name: Validate database
      run: |
        echo "‚úÖ Validating updated database..."
        cd .github/scripts
        python validate_database.py
        
    - name: Generate update report
      run: |
        echo "üìã Generating update report..."
        cd .github/scripts
        python generate_report.py > update_report.txt
        
        # Show summary
        echo "=== UPDATE SUMMARY ==="
        cat update_report.txt
        
    - name: Commit database changes
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the updated database
        git add new_project/db/soccer_data_colab.db
        git add .github/scripts/update_report.txt
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "üìä No database changes detected"
        else
          # Commit changes
          git commit -m "ü§ñ Daily database update - $(date +'%Y-%m-%d %H:%M UTC')"
          git push
          echo "‚úÖ Database updated and pushed to repository"
        fi
        
    - name: Create release with updated database
      if: github.event_name == 'schedule' || github.event.inputs.update_type == 'full_refresh'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: db-${{ github.run_number }}
        name: Database Update ${{ github.run_number }}
        body: |
          ü§ñ Automated database update
          
          **Update Time:** $(date +'%Y-%m-%d %H:%M UTC')
          **Type:** ${{ github.event.inputs.update_type || 'current_season' }}
          
          ### Changes:
          - Updated current season team standings
          - Refreshed team-competition relationships
          - Validated data integrity
          
          ### Usage:
          Download `soccer_data_colab.db` and place in your `new_project/db/` folder
          
        files: |
          new_project/db/soccer_data_colab.db
          .github/scripts/update_report.txt
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Database update failed!"
        echo "Check the logs above for error details."
        # Could add Slack/Discord notification here if needed
